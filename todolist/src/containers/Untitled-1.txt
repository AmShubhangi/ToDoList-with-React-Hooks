import React, { useState } from 'react'
import Container from '@material-ui/core/Container'
import Grid from '@material-ui/core/Grid'
import TextField from '@material-ui/core/TextField'
import Button from '@material-ui/core/Button'
import moment, { now } from 'moment';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import '../App.css';
import _ from 'lodash';

function TodoContainer() {
    const [buttonText, setButtonText] = useState('Start');
    const [count, setCount] = useState(1);
    const [item, setItem] = useState('');
    const [itemBulk, setItemBulk] = useState({ id: '', itemName: '', cDate: new Date() });
    const [theArray, setTheArray] = useState([]);
    const [completedArray, setCompletedArray] = useState([]);
    // const [onClickStartDate, setonClickStartDate] = useState({ cDate: '' });

    function addToDoItems() {
        setCount(count + 1);
        var obj = {
            ...itemBulk, id: count, itemName: item, cDate: moment(new Date(Date.now())).format("DD/MM/YYYY, hh:mm:ss")
        }
        setItemBulk(obj);
        setItem('');
        theArray.push(obj);
    }

    function onStartClick(id, index) {
        // console.log(setonClickStartDate({ ...itemBulk, cDate: moment(new Date(Date.now())).format("DD/MM/YYYY, hh:mm:ss") });)
        setButtonText('Started');
    }

    function onDeleteTask(name, index) {
        // eslint-disable-next-line no-restricted-globals
        if (confirm("Do you want to delete this " + name + '?')) {
            const newArray = [...theArray];
            newArray.splice(index, 1);
            setTheArray(newArray);
        }
    }

    function onCompletedItems(id, name, date, index) {
        // eslint-disable-next-line no-restricted-globals
        if (confirm("Is Completed " + name + ' Task ?')) {
            const newArray = [...theArray];
            newArray.splice(index, 1);
            setTheArray(newArray);
            var ccDate = moment(new Date(Date.now())).format("DD/MM/YYYY, HH:mm:ss");
            var timeTaken = moment.utc(moment(ccDate, "DD/MM/YYYY HH:mm:ss").diff(moment(date, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm:ss");

            var newcompletedArray = {
                ...itemBulk, id: id, itemName: name, date: date, completeDate: moment(new Date(Date.now())).format("DD/MM/YYYY, hh:mm:ss"),
                timeTook: timeTaken
            }
            completedArray.push(newcompletedArray);
            setItemBulk(newcompletedArray);
        }
        // var duration = moment.duration(moment.utc(moment(ccDate, "DD/MM/YYYY HH:mm:ss").diff(moment(date, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm:ss"));

        // console.log(duration.asDays() + ' days ' + duration.asHours() + ' hours ' + duration.asMinutes() + ' minutes ' + duration.asSeconds() + ' seconds');
    }

    return (
        <div>
            <Container >
                <h1>Add your Todo Items</h1>
                <Grid >
                    <Grid item>
                        <TextField
                            id="textfield"
                            label="Enter Todo"
                            placeholder="Todo"
                            margin="normal"
                            value={item}
                            onChange={(event) => setItem(event.target.value)} />
                    </Grid>
                    <Grid item>
                        <br></br>
                        <Button variant="contained" color="primary" onClick={() => addToDoItems()}>
                            Add
                       </Button>
                    </Grid>
                </Grid>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell align="right">Id</TableCell>
                            <TableCell align="right">Status&nbsp;</TableCell>
                            <TableCell align="right">Task Name&nbsp;</TableCell>
                            <TableCell align="right">Start Date &amp; Time&nbsp;</TableCell>
                            <TableCell align="right">Delete</TableCell>
                        </TableRow>
                    </TableHead>
                    {
                        theArray.map((item, index) => {
                            return <TableBody key={index}>
                                <TableRow >
                                    <TableCell align="right">{item.id}</TableCell>
                                    <TableCell align="right">
                                        <Button className={buttonText === 'Started' ? 'primary' : 'default'} onClick={() => onStartClick(item.id, index)}>{buttonText}</Button>
                                        <Button color="default" onClick={() => onCompletedItems(item.id, item.itemName, item.cDate, index)}>Complete ?</Button>
                                    </TableCell>
                                    <TableCell align="right">
                                        {item.itemName}
                                    </TableCell>
                                    <TableCell align="right">
                                     
                                        {buttonText === 'Started' ? theArray[index].cDate : ''}
                                    </TableCell>
                                    <TableCell align="right">
                                        <Button className="danger" onClick={() => onDeleteTask(item.itemName, index)}>Delete</Button>
                                    </TableCell>
                                </TableRow>
                            </TableBody>
                        })
                    }
                </Table>

            </Container>
            <br />
            <br />
            <br />
            <br />
            <Container >
                <h1>Your Complted Task</h1>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell align="right">Id</TableCell>
                            <TableCell align="right">Task Name&nbsp;</TableCell>
                            <TableCell align="right">End Date &amp; Time&nbsp;</TableCell>
                            <TableCell align="right">Total Days &amp; Time</TableCell>
                        </TableRow>
                    </TableHead>
                    {
                        completedArray.map((item, index) => {
                            return <TableBody key={index}>
                                <TableRow >
                                    <TableCell align="right">{item.id}</TableCell>
                                    <TableCell align="right">
                                        {item.itemName}
                                    </TableCell>
                                    <TableCell align="right">
                                        {item.date}---{item.completeDate}
                                    </TableCell>
                                    <TableCell align="right">
                                        {item.timeTook}
                                    </TableCell>
                                </TableRow>
                            </TableBody>
                        })
                    }
                </Table>
            </Container>
        </div>
    )
}


export default TodoContainer